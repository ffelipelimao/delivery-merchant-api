// Code generated by MockGen. DO NOT EDIT.
// Source: ./finish_order.go
//
// Generated by this command:
//
//	mockgen -destination=./../../mocks/usecases/finish_order_mock.go -source=./finish_order.go -package=mocks_usecases
//
// Package mocks_usecases is a generated GoMock package.
package mocks_usecases

import (
	context "context"
	reflect "reflect"

	dtos "github.com/Pos-Tech-Challenge-48/delivery-merchant-api/internal/dtos"
	gomock "go.uber.org/mock/gomock"
)

// MockFinishOrderUseCase is a mock of FinishOrderUseCase interface.
type MockFinishOrderUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockFinishOrderUseCaseMockRecorder
}

// MockFinishOrderUseCaseMockRecorder is the mock recorder for MockFinishOrderUseCase.
type MockFinishOrderUseCaseMockRecorder struct {
	mock *MockFinishOrderUseCase
}

// NewMockFinishOrderUseCase creates a new mock instance.
func NewMockFinishOrderUseCase(ctrl *gomock.Controller) *MockFinishOrderUseCase {
	mock := &MockFinishOrderUseCase{ctrl: ctrl}
	mock.recorder = &MockFinishOrderUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFinishOrderUseCase) EXPECT() *MockFinishOrderUseCaseMockRecorder {
	return m.recorder
}

// Handle mocks base method.
func (m *MockFinishOrderUseCase) Handle(ctx context.Context, input *dtos.FinishOrderDTO) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Handle", ctx, input)
	ret0, _ := ret[0].(error)
	return ret0
}

// Handle indicates an expected call of Handle.
func (mr *MockFinishOrderUseCaseMockRecorder) Handle(ctx, input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Handle", reflect.TypeOf((*MockFinishOrderUseCase)(nil).Handle), ctx, input)
}
