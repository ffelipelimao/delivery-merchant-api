// Code generated by MockGen. DO NOT EDIT.
// Source: ./list_orders.go
//
// Generated by this command:
//
//	mockgen -destination=./../../mocks/usecases/list_orders_mock.go -source=./list_orders.go -package=mocks_usecases
//
// Package mocks_usecases is a generated GoMock package.
package mocks_usecases

import (
	context "context"
	reflect "reflect"

	entities "github.com/Pos-Tech-Challenge-48/delivery-merchant-api/internal/entities"
	gomock "go.uber.org/mock/gomock"
)

// MockListOrdersUseCase is a mock of ListOrdersUseCase interface.
type MockListOrdersUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockListOrdersUseCaseMockRecorder
}

// MockListOrdersUseCaseMockRecorder is the mock recorder for MockListOrdersUseCase.
type MockListOrdersUseCaseMockRecorder struct {
	mock *MockListOrdersUseCase
}

// NewMockListOrdersUseCase creates a new mock instance.
func NewMockListOrdersUseCase(ctrl *gomock.Controller) *MockListOrdersUseCase {
	mock := &MockListOrdersUseCase{ctrl: ctrl}
	mock.recorder = &MockListOrdersUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockListOrdersUseCase) EXPECT() *MockListOrdersUseCaseMockRecorder {
	return m.recorder
}

// Handle mocks base method.
func (m *MockListOrdersUseCase) Handle(ctx context.Context, merchantID string) (*[]entities.MerchantOrder, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Handle", ctx, merchantID)
	ret0, _ := ret[0].(*[]entities.MerchantOrder)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Handle indicates an expected call of Handle.
func (mr *MockListOrdersUseCaseMockRecorder) Handle(ctx, merchantID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Handle", reflect.TypeOf((*MockListOrdersUseCase)(nil).Handle), ctx, merchantID)
}
