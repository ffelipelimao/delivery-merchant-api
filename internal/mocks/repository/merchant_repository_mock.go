// Code generated by MockGen. DO NOT EDIT.
// Source: ./merchant_repository.go
//
// Generated by this command:
//
//	mockgen -destination=./../../mocks/repository/merchant_repository_mock.go -source=./merchant_repository.go -package=mocks_repository
//
// Package mocks_repository is a generated GoMock package.
package mocks_repository

import (
	context "context"
	reflect "reflect"

	entities "github.com/Pos-Tech-Challenge-48/delivery-merchant-api/internal/entities"
	gomock "go.uber.org/mock/gomock"
)

// MockMerchantOrderRepository is a mock of MerchantOrderRepository interface.
type MockMerchantOrderRepository struct {
	ctrl     *gomock.Controller
	recorder *MockMerchantOrderRepositoryMockRecorder
}

// MockMerchantOrderRepositoryMockRecorder is the mock recorder for MockMerchantOrderRepository.
type MockMerchantOrderRepositoryMockRecorder struct {
	mock *MockMerchantOrderRepository
}

// NewMockMerchantOrderRepository creates a new mock instance.
func NewMockMerchantOrderRepository(ctrl *gomock.Controller) *MockMerchantOrderRepository {
	mock := &MockMerchantOrderRepository{ctrl: ctrl}
	mock.recorder = &MockMerchantOrderRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMerchantOrderRepository) EXPECT() *MockMerchantOrderRepositoryMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockMerchantOrderRepository) Get(ctx context.Context, merchantID, orderID string) (*entities.MerchantOrder, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, merchantID, orderID)
	ret0, _ := ret[0].(*entities.MerchantOrder)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockMerchantOrderRepositoryMockRecorder) Get(ctx, merchantID, orderID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockMerchantOrderRepository)(nil).Get), ctx, merchantID, orderID)
}

// GetByStatus mocks base method.
func (m *MockMerchantOrderRepository) GetByStatus(ctx context.Context, merchantID, status string) ([]entities.MerchantOrder, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByStatus", ctx, merchantID, status)
	ret0, _ := ret[0].([]entities.MerchantOrder)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByStatus indicates an expected call of GetByStatus.
func (mr *MockMerchantOrderRepositoryMockRecorder) GetByStatus(ctx, merchantID, status any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByStatus", reflect.TypeOf((*MockMerchantOrderRepository)(nil).GetByStatus), ctx, merchantID, status)
}

// Insert mocks base method.
func (m *MockMerchantOrderRepository) Insert(ctx context.Context, merchantOrder *entities.MerchantOrder) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", ctx, merchantOrder)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert.
func (mr *MockMerchantOrderRepositoryMockRecorder) Insert(ctx, merchantOrder any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockMerchantOrderRepository)(nil).Insert), ctx, merchantOrder)
}

// Update mocks base method.
func (m *MockMerchantOrderRepository) Update(ctx context.Context, merchantOrder *entities.MerchantOrder) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, merchantOrder)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockMerchantOrderRepositoryMockRecorder) Update(ctx, merchantOrder any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockMerchantOrderRepository)(nil).Update), ctx, merchantOrder)
}
