// Code generated by MockGen. DO NOT EDIT.
// Source: ./queue.go
//
// Generated by this command:
//
//	mockgen -destination=./../../mocks/queue/queue_mock.go -source=./queue.go -package=mocks_queue
//
// Package mocks_queue is a generated GoMock package.
package mocks_queue

import (
	reflect "reflect"

	queue "github.com/Pos-Tech-Challenge-48/delivery-merchant-api/internal/external/queue"
	gomock "go.uber.org/mock/gomock"
)

// MockQueue is a mock of Queue interface.
type MockQueue struct {
	ctrl     *gomock.Controller
	recorder *MockQueueMockRecorder
}

// MockQueueMockRecorder is the mock recorder for MockQueue.
type MockQueueMockRecorder struct {
	mock *MockQueue
}

// NewMockQueue creates a new mock instance.
func NewMockQueue(ctrl *gomock.Controller) *MockQueue {
	mock := &MockQueue{ctrl: ctrl}
	mock.recorder = &MockQueueMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockQueue) EXPECT() *MockQueueMockRecorder {
	return m.recorder
}

// DeleteMessageFromQueue mocks base method.
func (m *MockQueue) DeleteMessageFromQueue(receiptHandle string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMessageFromQueue", receiptHandle)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteMessageFromQueue indicates an expected call of DeleteMessageFromQueue.
func (mr *MockQueueMockRecorder) DeleteMessageFromQueue(receiptHandle any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMessageFromQueue", reflect.TypeOf((*MockQueue)(nil).DeleteMessageFromQueue), receiptHandle)
}

// PollingMessages mocks base method.
func (m *MockQueue) PollingMessages() ([]queue.Content, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PollingMessages")
	ret0, _ := ret[0].([]queue.Content)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PollingMessages indicates an expected call of PollingMessages.
func (mr *MockQueueMockRecorder) PollingMessages() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PollingMessages", reflect.TypeOf((*MockQueue)(nil).PollingMessages))
}
